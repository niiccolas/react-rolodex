{"version":3,"sources":["components/Card/Card.jsx","components/CardList/CardList.jsx","components/SearchBox/SearchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","imgKey","name","email","className","alt","src","CardList","data","cards","searchField","filteredCards","filter","card","toLowerCase","includes","map","i","key","SearchBox","placeholder","handleChange","type","onChange","APP_TITLE","App","componentDidMount","a","fetch","apiCall","json","users","setState","console","log","e","target","value","render","state","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uWAIaA,G,YAAO,SAAAC,GAAU,IACpBC,EAAwBD,EAAxBC,OAAQC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAEtB,OACE,yBAAKC,UAAU,QACb,yBACEA,UAAU,YACVC,IAAI,cACJC,IAAG,+BAA0BL,EAA1B,4BAEL,wBAAIG,UAAU,eAAeF,GAC7B,2BAAOE,UAAU,gBAAgBD,MCV1BI,G,MAAW,SAAAP,GAAU,IAAD,EACAA,EAAMQ,KAA7BC,EADuB,EACvBA,MAAOC,EADgB,EAChBA,YACTC,EAAgBF,EAAMG,OAAO,SAAAC,GACjC,OAAOA,EAAKX,KAAKY,cAAcC,SAASL,EAAYI,iBAGtD,OACE,yBAAKV,UAAU,YACZO,EAAcK,IAAI,SAACH,EAAMI,GAAO,IACvBf,EAAgBW,EAAhBX,KAAMC,EAAUU,EAAVV,MACd,OAAO,kBAAC,EAAD,CAAMD,KAAMA,EAAMC,MAAOA,EAAOF,OAAQgB,EAAGC,IAAKD,SCXlDE,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,6BACE,2BACEjB,UAAU,mBACVkB,KAAK,SACLF,YAAaA,EACbG,SAAUF,OCLVG,EAAY,YAwCHC,E,YApCb,aAAe,IAAD,8BACZ,+CASFC,kBAVc,qBAUM,8BAAAC,EAAA,8EAEMC,MAAM,8CAFZ,cAEVC,EAFU,gBAGIA,EAAQC,OAHZ,OAGVC,EAHU,OAIhB,EAAKC,SAAS,CAAEvB,MAAOsB,IAJP,kDAMhBE,QAAQC,IAAR,qCANgB,wDAVN,EAoBdb,aAAe,SAAAc,GACb,EAAKH,SAAS,CAAEtB,YAAayB,EAAEC,OAAOC,SArB1B,EAwBdC,OAAS,kBACP,yBAAKlC,UAAU,OACb,wBAAIA,UAAU,cAAcoB,GAC5B,kBAAC,EAAD,CACEJ,YAAY,0BACZC,aAAc,EAAKA,eAErB,kBAAC,EAAD,CAAUb,KAAM,EAAK+B,UA5BvB,EAAKA,MAAQ,CACX9B,MAAO,GACPC,YAAa,IALH,E,2BADE8B,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAAO,kBAAC,EAAD,MAASS,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2a2f473d.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nexport const Card = props => {\n  const { imgKey, name, email } = props;\n\n  return (\n    <div className=\"Card\">\n      <img\n        className=\"Card__img\"\n        alt=\"placeholder\"\n        src={`http://unsplash.it/40${imgKey}?random&gravity=center`}\n      />\n      <h2 className=\"Card__title\">{name}</h2>\n      <small className=\"Card__footer\">{email}</small>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Card } from '../Card/Card';\n\nimport './CardList.css';\n\nexport const CardList = props => {\n  const { cards, searchField } = props.data;\n  const filteredCards = cards.filter(card => {\n    return card.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  return (\n    <div className=\"CardList\">\n      {filteredCards.map((card, i) => {\n        const { name, email } = card;\n        return <Card name={name} email={email} imgKey={i} key={i} />;\n      })}\n    </div>\n  );\n};\n","import React from 'react';\n\nimport './SearchBox.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <div>\n    <input\n      className=\"SearchBox__input\"\n      type=\"search\"\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  </div>\n);\n","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/CardList/CardList';\nimport { SearchBox } from './components/SearchBox/SearchBox';\n\nconst APP_TITLE = 'R_Rolodex';\n\n// A class component gives us access to `setState()` method + `this.state` object\nclass App extends Component {\n  constructor() {\n    super(); // call to the Component class\n\n    this.state = {\n      cards: [],\n      searchField: ''\n    };\n  }\n\n  // LIFECYCLE METHOD\n  componentDidMount = async () => {\n    try {\n      const apiCall = await fetch('https://jsonplaceholder.typicode.com/users');\n      const users = await apiCall.json();\n      this.setState({ cards: users });\n    } catch (e) {\n      console.log(`There was an error: ${e}`);\n    }\n  };\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render = () => (\n    <div className=\"App\">\n      <h1 className=\"App__title\">{APP_TITLE}</h1>\n      <SearchBox\n        placeholder=\"Filter items hereâ€¦\"\n        handleChange={this.handleChange}\n      />\n      <CardList data={this.state} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}